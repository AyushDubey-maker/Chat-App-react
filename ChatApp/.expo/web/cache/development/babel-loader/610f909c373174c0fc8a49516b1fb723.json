{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Ayush\\\\Desktop\\\\React Native\\\\Chat-App\\\\ChatApp\\\\screens\\\\LoginScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button, Input, Image } from 'react-native-elements';\nimport { auth } from \"../firebase\";\nimport Expo from 'expo';\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var signIn = function signIn() {\n    auth.signInWithEmailAndPassword(email, password).catch(function (error) {\n      return alert(error);\n    });\n  };\n\n  var signInGoogle = function signInGoogle() {\n    var _await$Expo$Google$lo, type, accessToken, user;\n\n    return _regeneratorRuntime.async(function signInGoogle$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Expo.Google.logInAsync({\n              iosClientId: \"<YOUR_IOS_CLIENT_ID_FOR_EXPO>\",\n              androidClientId: \"<YOUR_ANDROID_CLIENT_ID_FOR_EXPO>\",\n              iosStandaloneAppClientId: \"<YOUR_IOS_CLIENT_ID>\",\n              androidStandaloneAppClientId: \"<YOUR_ANDROID_CLIENT_ID>\"\n            }));\n\n          case 3:\n            _await$Expo$Google$lo = _context.sent;\n            type = _await$Expo$Google$lo.type;\n            accessToken = _await$Expo$Google$lo.accessToken;\n            user = _await$Expo$Google$lo.user;\n\n            if (type === 'success') {\n              console.log(user);\n            } else {\n              console.log('Cancelled');\n            }\n\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"Error :\", _context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  useEffect(function () {\n    var unsubscribe = auth.onAuthStateChanged(function (authUser) {\n      if (authUser) {\n        navigation.push(\"Home\");\n      }\n    });\n    return unsubscribe;\n  }, []);\n  return React.createElement(KeyboardAvoidingView, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, React.createElement(StatusBar, {\n    style: \"light\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), React.createElement(Image, {\n    source: {\n      uri: \"https://blog.mozilla.org/internetcitizen/files/2018/08/signal-logo.png\"\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.inputContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }\n  }, React.createElement(Input, {\n    placeholder: \"Email\",\n    autoFocus: true,\n    type: \"email\",\n    value: email,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 16\n    }\n  }), React.createElement(Input, {\n    placeholder: \"Password\",\n    secureTextEntry: true,\n    type: \"password\",\n    value: password,\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    onSubmitEditing: signIn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 16\n    }\n  })), React.createElement(Button, {\n    containerStyle: styles.button,\n    type: \"outline\",\n    title: \"Sign In Google\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }\n  }), React.createElement(Button, {\n    containerStyle: styles.button,\n    onPress: signIn,\n    title: \"Login\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }\n  }), React.createElement(Button, {\n    containerStyle: styles.button,\n    type: \"outline\",\n    title: \"Register\",\n    onPress: function onPress() {\n      return navigation.navigate('Register');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }\n  }), React.createElement(View, {\n    style: {\n      height: 100\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 10,\n    backgroundColor: 'white'\n  },\n  text: {\n    marginLeft: 20\n  },\n  inputContainer: {\n    width: 300\n  },\n  button: {\n    width: 200,\n    marginTop: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/Ayush/Desktop/React Native/Chat-App/ChatApp/screens/LoginScreen.js"],"names":["React","useState","useEffect","Button","Input","Image","auth","Expo","LoginScreen","navigation","email","setEmail","password","setPassword","signIn","signInWithEmailAndPassword","catch","error","alert","signInGoogle","Google","logInAsync","iosClientId","androidClientId","iosStandaloneAppClientId","androidStandaloneAppClientId","type","accessToken","user","console","log","unsubscribe","onAuthStateChanged","authUser","push","styles","container","uri","width","height","inputContainer","text","button","navigate","StyleSheet","create","flex","alignItems","justifyContent","padding","backgroundColor","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport { KeyboardAvoidingView } from 'react-native'\r\nimport { StatusBar } from 'react-native'\r\nimport { View, Text,StyleSheet } from 'react-native'\r\nimport {Button,Input,Image} from 'react-native-elements'\r\nimport {auth} from '../firebase'\r\nimport Expo from 'expo'\r\n\r\nconst LoginScreen = ({navigation}) => {\r\n    const[email,setEmail]=useState('');\r\n    const[password,setPassword]=useState('');\r\n    const signIn=()=>{\r\n     auth.signInWithEmailAndPassword(email,password).catch((error)=>alert(error))\r\n    }\r\n    const signInGoogle=async()=>{\r\n        try{\r\n            const { type, accessToken, user } = await Expo.Google.logInAsync({\r\n                iosClientId: `<YOUR_IOS_CLIENT_ID_FOR_EXPO>`,\r\n                androidClientId: `<YOUR_ANDROID_CLIENT_ID_FOR_EXPO>`,\r\n                iosStandaloneAppClientId: `<YOUR_IOS_CLIENT_ID>`,\r\n                androidStandaloneAppClientId: `<YOUR_ANDROID_CLIENT_ID>`,\r\n              });\r\n              \r\n              if (type === 'success') {\r\n                /* `accessToken` is now valid and can be used to get data from the Google API with HTTP requests */\r\n                console.log(user);\r\n              } else{\r\n                  console.log('Cancelled')\r\n              }\r\n\r\n        }catch(e){\r\n            console.log(\"Error :\",e)\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        const unsubscribe=  auth.onAuthStateChanged((authUser)=>{\r\n            if(authUser){\r\n                navigation.push(\"Home\")\r\n            }\r\n            })\r\n            return unsubscribe;\r\n    },[])\r\n    return (\r\n        <KeyboardAvoidingView style={styles.container}>\r\n            <StatusBar style=\"light\"/>\r\n            <Image source={{\r\n                uri:\"https://blog.mozilla.org/internetcitizen/files/2018/08/signal-logo.png\"\r\n            }}\r\n            style={{width:200,height:200}}\r\n            />\r\n           <View style={styles.inputContainer}>\r\n               <Input placeholder=\"Email\" autoFocus type=\"email\" value={email} onChangeText={(text)=>setEmail(text)}/>\r\n               <Input placeholder=\"Password\" secureTextEntry type=\"password\" value={password}  onChangeText={(text)=>setPassword(text)} onSubmitEditing={signIn}/>\r\n           </View >\r\n           <Button containerStyle={styles.button} type=\"outline\" title=\"Sign In Google\"\r\n           />\r\n           <Button containerStyle={styles.button} onPress={signIn} title=\"Login\"/>\r\n           <Button containerStyle={styles.button} type=\"outline\" title=\"Register\" onPress={()=>navigation.navigate('Register')}/>\r\n            <View style={{height:100}}/>\r\n        </KeyboardAvoidingView>\r\n    )\r\n}\r\n\r\nexport default LoginScreen;\r\n\r\nconst styles=StyleSheet.create({\r\n    container:{\r\n  flex:1,\r\n  alignItems:\"center\",\r\n  justifyContent:\"center\",\r\n  padding:10,\r\nbackgroundColor:'white'\r\n},\r\ntext:{\r\n    marginLeft:20\r\n},\r\ninputContainer:{\r\nwidth:300\r\n},\r\nbutton:{\r\nwidth:200,\r\nmarginTop:10\r\n}\r\n\r\n})\r\n\r\n"]},"metadata":{},"sourceType":"module"}